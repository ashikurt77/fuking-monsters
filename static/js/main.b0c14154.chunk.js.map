{"version":3,"sources":["Components/Card/Card.component.jsx","Components/CardList/CardList.component.jsx","Components/SearchField/SearchField.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","CardList","monsters","map","user","key","SearchField","placeholder","eventHandler","type","onChange","App","componentDidMount","fetch","then","response","json","users","setState","updateText","e","searchBox","target","value","state","this","filteredMonsters","filter","monster","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6TAGaA,G,MAAO,SAAAC,GAAU,IACnBC,EAAiBD,EAAjBC,KAAKC,EAAYF,EAAZE,MAAMC,EAAMH,EAANG,GAClB,OACI,yBAAKC,UAAY,kBACb,yBAAKC,IAAM,UAAUC,IAAG,+BAA4BH,EAA5B,4BACxB,gCAAMF,EAAN,KACA,2BAAIC,MCLHK,G,MAAW,SAAAP,GAAW,IAC1BQ,EAAYR,EAAZQ,SACL,OACI,yBAAKJ,UAAY,aACXI,EAASC,KAAI,SAAAC,GAAI,OACf,kBAAC,EAAD,CAAMC,IAAOD,EAAKP,GAAIF,KAAOS,EAAKT,KAAMC,MAASQ,EAAKR,MAAOC,GAAKO,EAAKP,WCN1ES,G,MAAc,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACtC,OACI,2BACAC,KAAK,SACLX,UAAU,SACVS,YAAcA,EACdG,SAAYF,MCsCLG,G,kBAzCb,aAAc,IAAD,8BAEX,+CAQFC,kBAAoB,WAClBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAU,CAAEhB,SAASe,QAb9B,EAgBbE,WAAa,SAACC,GACZ,EAAKF,SAAS,CAACG,UAAWD,EAAEE,OAAOC,SAbnC,EAAKC,MAAM,CACTtB,SAAW,GACXmB,UAAW,IANF,E,sEAoBJ,IAAD,SAEwBI,KAAKD,MAA5BtB,EAFD,EAECA,SAAUmB,EAFX,EAEWA,UAEXK,EAAmBxB,EAASyB,QAAO,SAAAC,GAAO,OAAGA,EAAQjC,KAAKkC,cAAcC,SAAST,EAAUQ,kBAEjG,OACE,yBAAK/B,UAAU,OACb,kDACA,kBAAC,EAAD,CACAS,YAAc,kBACdC,aAAiB,SAAAY,GAAC,OAAI,EAAKD,WAAWC,MAGtC,kBAAC,EAAD,CAAUlB,SAAYwB,S,GApCZK,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,MAAK,SAAA+B,GACjCA,EAAaC,kB","file":"static/js/main.b0c14154.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.style.css';\r\n\r\nexport const Card = props => {\r\n    const {name,email,id} = props;\r\n    return (\r\n        <div className = \"card-container\">\r\n            <img alt = \"monster\" src = {`https://robohash.org/${id}?set=set2&size=180x180`}/>\r\n            <h2> {name} </h2>\r\n            <p>{email}</p>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {Card} from '../Card/Card.component';\r\nimport './CardList.style.css';\r\n\r\nexport const CardList = props  => {\r\n    let {monsters} = props;\r\n    return(\r\n        <div className = \"card-list\">\r\n            { monsters.map(user=> (  \r\n                <Card key = {user.id} name ={user.name} email = {user.email} id= {user.id} />\r\n            )) \r\n            }\r\n        </div>\r\n    )\r\n};","import React from 'react';\r\nimport './SearchField.style.css';\r\n\r\nexport const SearchField = ({placeholder, eventHandler}) => {\r\n    return(\r\n        <input \r\n        type=\"search\"\r\n        className=\"search\" \r\n        placeholder= {placeholder} \r\n        onChange = {eventHandler}\r\n        />\r\n    )\r\n}","import React from 'react';\nimport {CardList} from './Components/CardList/CardList.component';\nimport {SearchField} from './Components/SearchField/SearchField.component';\nimport './App.css';\nclass App extends React.Component{\n\n  constructor(){\n\n    super();\n\n    this.state={\n      monsters : [],\n      searchBox: ''\n    }\n  }\n\n  componentDidMount = () =>{\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(users => this.setState( { monsters:users } ));\n  }\n\n  updateText = (e) => {\n    this.setState({searchBox: e.target.value} );\n  }\n\n  render(){\n\n    const {monsters, searchBox} = this.state;\n\n    const filteredMonsters = monsters.filter(monster=> monster.name.toLowerCase().includes(searchBox.toLowerCase()));\n\n    return(\n      <div className=\"App\">\n        <h1> Fucking Monsters </h1>\n        <SearchField \n        placeholder = \"Search Monsters\"\n        eventHandler =  {e => this.updateText(e)}\n        />\n\n        <CardList monsters = {filteredMonsters}/>\n\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}